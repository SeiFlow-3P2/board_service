// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/board.proto

package board_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BoardService_CreateBoard_FullMethodName  = "/board.BoardService/CreateBoard"
	BoardService_GetBoards_FullMethodName    = "/board.BoardService/GetBoards"
	BoardService_GetBoardInfo_FullMethodName = "/board.BoardService/GetBoardInfo"
	BoardService_UpdateBoard_FullMethodName  = "/board.BoardService/UpdateBoard"
	BoardService_DeleteBoard_FullMethodName  = "/board.BoardService/DeleteBoard"
	BoardService_CreateColumn_FullMethodName = "/board.BoardService/CreateColumn"
	BoardService_UpdateColumn_FullMethodName = "/board.BoardService/UpdateColumn"
	BoardService_DeleteColumn_FullMethodName = "/board.BoardService/DeleteColumn"
	BoardService_CreateTask_FullMethodName   = "/board.BoardService/CreateTask"
	BoardService_MoveTask_FullMethodName     = "/board.BoardService/MoveTask"
	BoardService_UpdateTask_FullMethodName   = "/board.BoardService/UpdateTask"
	BoardService_DeleteTask_FullMethodName   = "/board.BoardService/DeleteTask"
)

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*BoardResponse, error)
	GetBoards(ctx context.Context, in *GetBoardsRequest, opts ...grpc.CallOption) (*BoardResponse, error)
	GetBoardInfo(ctx context.Context, in *GetBoardInfoRequest, opts ...grpc.CallOption) (*GetBoardInfoResponse, error)
	UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*BoardResponse, error)
	DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*ColumnResponse, error)
	UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*ColumnResponse, error)
	DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	MoveTask(ctx context.Context, in *MoveTaskRequest, opts ...grpc.CallOption) (*MoveTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) CreateBoard(ctx context.Context, in *CreateBoardRequest, opts ...grpc.CallOption) (*BoardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoardResponse)
	err := c.cc.Invoke(ctx, BoardService_CreateBoard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoards(ctx context.Context, in *GetBoardsRequest, opts ...grpc.CallOption) (*BoardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoardResponse)
	err := c.cc.Invoke(ctx, BoardService_GetBoards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetBoardInfo(ctx context.Context, in *GetBoardInfoRequest, opts ...grpc.CallOption) (*GetBoardInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBoardInfoResponse)
	err := c.cc.Invoke(ctx, BoardService_GetBoardInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateBoard(ctx context.Context, in *UpdateBoardRequest, opts ...grpc.CallOption) (*BoardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoardResponse)
	err := c.cc.Invoke(ctx, BoardService_UpdateBoard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteBoard(ctx context.Context, in *DeleteBoardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoardService_DeleteBoard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) CreateColumn(ctx context.Context, in *CreateColumnRequest, opts ...grpc.CallOption) (*ColumnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnResponse)
	err := c.cc.Invoke(ctx, BoardService_CreateColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateColumn(ctx context.Context, in *UpdateColumnRequest, opts ...grpc.CallOption) (*ColumnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ColumnResponse)
	err := c.cc.Invoke(ctx, BoardService_UpdateColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteColumn(ctx context.Context, in *DeleteColumnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoardService_DeleteColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, BoardService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) MoveTask(ctx context.Context, in *MoveTaskRequest, opts ...grpc.CallOption) (*MoveTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveTaskResponse)
	err := c.cc.Invoke(ctx, BoardService_MoveTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, BoardService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoardService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility.
type BoardServiceServer interface {
	CreateBoard(context.Context, *CreateBoardRequest) (*BoardResponse, error)
	GetBoards(context.Context, *GetBoardsRequest) (*BoardResponse, error)
	GetBoardInfo(context.Context, *GetBoardInfoRequest) (*GetBoardInfoResponse, error)
	UpdateBoard(context.Context, *UpdateBoardRequest) (*BoardResponse, error)
	DeleteBoard(context.Context, *DeleteBoardRequest) (*emptypb.Empty, error)
	CreateColumn(context.Context, *CreateColumnRequest) (*ColumnResponse, error)
	UpdateColumn(context.Context, *UpdateColumnRequest) (*ColumnResponse, error)
	DeleteColumn(context.Context, *DeleteColumnRequest) (*emptypb.Empty, error)
	CreateTask(context.Context, *CreateTaskRequest) (*TaskResponse, error)
	MoveTask(context.Context, *MoveTaskRequest) (*MoveTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*TaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBoardServiceServer struct{}

func (UnimplementedBoardServiceServer) CreateBoard(context.Context, *CreateBoardRequest) (*BoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedBoardServiceServer) GetBoards(context.Context, *GetBoardsRequest) (*BoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoards not implemented")
}
func (UnimplementedBoardServiceServer) GetBoardInfo(context.Context, *GetBoardInfoRequest) (*GetBoardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardInfo not implemented")
}
func (UnimplementedBoardServiceServer) UpdateBoard(context.Context, *UpdateBoardRequest) (*BoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoard not implemented")
}
func (UnimplementedBoardServiceServer) DeleteBoard(context.Context, *DeleteBoardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedBoardServiceServer) CreateColumn(context.Context, *CreateColumnRequest) (*ColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColumn not implemented")
}
func (UnimplementedBoardServiceServer) UpdateColumn(context.Context, *UpdateColumnRequest) (*ColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColumn not implemented")
}
func (UnimplementedBoardServiceServer) DeleteColumn(context.Context, *DeleteColumnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColumn not implemented")
}
func (UnimplementedBoardServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedBoardServiceServer) MoveTask(context.Context, *MoveTaskRequest) (*MoveTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTask not implemented")
}
func (UnimplementedBoardServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedBoardServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}
func (UnimplementedBoardServiceServer) testEmbeddedByValue()                      {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	// If the following call pancis, it indicates UnimplementedBoardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreateBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateBoard(ctx, req.(*CreateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_GetBoards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoards(ctx, req.(*GetBoardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetBoardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetBoardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_GetBoardInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetBoardInfo(ctx, req.(*GetBoardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdateBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateBoard(ctx, req.(*UpdateBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeleteBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteBoard(ctx, req.(*DeleteBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_CreateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreateColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateColumn(ctx, req.(*CreateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdateColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateColumn(ctx, req.(*UpdateColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeleteColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteColumn(ctx, req.(*DeleteColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_MoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).MoveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_MoveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).MoveTask(ctx, req.(*MoveTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBoard",
			Handler:    _BoardService_CreateBoard_Handler,
		},
		{
			MethodName: "GetBoards",
			Handler:    _BoardService_GetBoards_Handler,
		},
		{
			MethodName: "GetBoardInfo",
			Handler:    _BoardService_GetBoardInfo_Handler,
		},
		{
			MethodName: "UpdateBoard",
			Handler:    _BoardService_UpdateBoard_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _BoardService_DeleteBoard_Handler,
		},
		{
			MethodName: "CreateColumn",
			Handler:    _BoardService_CreateColumn_Handler,
		},
		{
			MethodName: "UpdateColumn",
			Handler:    _BoardService_UpdateColumn_Handler,
		},
		{
			MethodName: "DeleteColumn",
			Handler:    _BoardService_DeleteColumn_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _BoardService_CreateTask_Handler,
		},
		{
			MethodName: "MoveTask",
			Handler:    _BoardService_MoveTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _BoardService_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _BoardService_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/board.proto",
}
